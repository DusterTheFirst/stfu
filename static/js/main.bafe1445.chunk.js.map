{"version":3,"sources":["routes/Guild.tsx","App.tsx","serviceWorker.ts","style.ts","index.tsx"],"names":["GET_GUILD","gql","Guild","guild_id","useParams","useQuery","variables","loading","error","data","refetch","JSON","stringify","undefined","guild","to","onClick","name","id","style","color","owner","toString","fontWeight","nick","discriminator","voiceChannels","map","vc","i","key","canOperate","userLimit","states","length","App","path","exact","type","value","Boolean","window","location","hostname","match","GlobalStyle","createGlobalStyle","CLIENT","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","StrictMode","client","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"uvCAKA,IAAMA,EAAYC,cAAH,KA4CA,SAASC,IAAS,IAAD,IACtBC,EAAaC,cAAbD,SADsB,EAEYE,mBAAsCL,EAAW,CAAEM,UAAW,CAAEH,cAAlGI,EAFsB,EAEtBA,QAASC,EAFa,EAEbA,MAAOC,EAFM,EAENA,KAAMC,EAFA,EAEAA,QAE5B,GAAIH,EAAS,OAAO,2CACpB,GAAIC,EAAO,OAAO,wCAAa,6BAAM,6BAAMG,KAAKC,UAAUJ,OAAOK,EAAW,KAG5E,IAAIC,EAAQL,EAAMK,MAElB,OAAc,OAAVA,EAEI,6BACI,iDAAuBX,EAAvB,mDAMR,6BACI,kBAAC,IAAD,CAAMY,GAAG,OAAO,IAAhB,SACA,4BAAQC,QAAS,kBAAMN,MAAvB,WACA,+BACI,+BACI,4BACI,wCACA,uCAGR,+BACI,4BACI,2CACA,4BAAKI,EAAMG,OAEf,4BACI,yCACA,4BAAKH,EAAMI,KAEf,4BACI,4CACA,wBAAIC,MAAO,CAAEC,MAAM,IAAD,QAAM,UAAAN,EAAMO,aAAN,mBAAaD,aAAb,eAAoBE,SAAS,MAAO,UAAYC,WAAY,SAA2B,OAAhBT,EAAMO,MAAiB,qBAAvB,UAAiDP,EAAMO,MAAMG,MAAQV,EAAMO,MAAMJ,KAAjF,YAAyFH,EAAMO,MAAMI,iBAExM,4BACI,+CACA,4BACI,+BACI,+BACI,4BACI,oCACA,kCACA,2CACA,0CACA,uCAIR,+BACKX,EAAMY,cAAcC,KAAI,SAACC,EAAIC,GAAL,OACrB,wBAAIC,IAAKD,GACL,4BAAKD,EAAGX,MACR,4BAAKW,EAAGV,IACR,4BAAKU,EAAGG,WAAa,OAAS,SAC9B,4BAAKH,EAAGI,WACR,4BAAKJ,EAAGK,OAAOC,gBAOvC,4BACI,2CACA,4BAAKpB,EAAMG,SAKvB,6BACKN,KAAKC,UAAUH,OAAMI,EAAW,KCnFlCsB,MAxCf,WACI,OACI,kBAAC,IAAD,KACI,6BACI,6BACI,4BACI,4BACI,kBAAC,IAAD,CAAMpB,GAAG,KAAT,WAOZ,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOqB,KAAK,aAAaC,OAAK,GAC1B,kBAACnC,EAAD,OAEJ,kBAAC,IAAD,CAAOkC,KAAK,yBAAyBC,OAAK,IAG1C,kBAAC,IAAD,CAAOD,KAAK,IAAIC,OAAK,GACjB,4CAGI,6BACI,2BAAOC,KAAK,OAAOC,MAAO,uBAC1B,kBAAC,IAAD,CAAMxB,GAAI,uBAAV,kBAIZ,kBAAC,IAAD,CAAOqB,KAAK,KACR,yCCxBJI,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2D,ohBChBD,IAAMC,EAAcC,YAAH,KCKlBC,EAAS,IAAIC,eAAa,CAC5B/B,KAAM,OACNgC,IAAK,gCACLC,MAAO,IAAIC,kBAGfC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAACT,EAAD,MACA,kBAAC,iBAAD,CAAgBU,OAAQR,GACpB,kBAAC,EAAD,QAGRS,SAASC,eAAe,SFuHpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAAAC,GACFA,EAAaC,gBAEhBC,OAAM,SAAAxD,GACHyD,QAAQzD,MAAMA,EAAM0D,c","file":"static/js/main.bafe1445.chunk.js","sourcesContent":["import { gql, useQuery } from \"@apollo/client\";\nimport React from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { GetGuild, GetGuildVariables } from \"./__generated__/GetGuild\";\n\nconst GET_GUILD = gql`\n    query GetGuild($guild_id: String!) {\n        guild(id: $guild_id) {\n            name,\n            id,\n            icon\n            banner\n            owner {\n                id\n                name\n                avatar\n                color\n                nick\n                discriminator\n            }\n            unavailable\n            voiceChannels {\n                canOperate\n                category {\n                    id\n                    name\n                    position\n                }\n                id\n                name\n                position\n                states {\n                    deaf\n                    id\n                    member {\n                        id\n                        name\n                        avatar\n                        color\n                        nick\n                    }\n                    mute\n                }\n                userLimit\n            }\n        }\n    }\n`;\n\nexport default function Guild() {\n    let { guild_id } = useParams<{ guild_id: string }>();\n    let { loading, error, data, refetch } = useQuery<GetGuild, GetGuildVariables>(GET_GUILD, { variables: { guild_id } });\n\n    if (loading) return <div>Loading...</div>;\n    if (error) return <div>Error :(<br /><pre>{JSON.stringify(error, undefined, 4)}</pre></div>\n\n    // Safety: I can guarantee, at this state that data is not null since it is only allowed to be null if there is an error, which would be caught\n    let guild = data!.guild;\n\n    if (guild === null) {\n        return (\n            <div>\n                <h1>The guild with id {guild_id} does not exist or is not available to the bot</h1>\n            </div>\n        )\n    }\n\n    return (\n        <div>\n            <Link to=\"../\">{\"<\"} Back</Link>\n            <button onClick={() => refetch()}>Refresh</button>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Property</th>\n                        <th>Value</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>Guild name:</td>\n                        <td>{guild.name}</td>\n                    </tr>\n                    <tr>\n                        <td>Guild id:</td>\n                        <td>{guild.id}</td>\n                    </tr>\n                    <tr>\n                        <td>Guild owner:</td>\n                        <td style={{ color: `#${guild.owner?.color?.toString(16) || \"000000\"}`, fontWeight: \"bold\" }}>{guild.owner === null ? \"Could not be found\" : `${guild.owner.nick || guild.owner.name}#${guild.owner.discriminator}`}</td>\n                    </tr>\n                    <tr>\n                        <td>Voice channels:</td>\n                        <td>\n                            <table>\n                                <thead>\n                                    <tr>\n                                        <th>Name</th>\n                                        <th>Id</th>\n                                        <th>Can operate</th>\n                                        <th>User Limit</th>\n                                        <th>Users</th>\n\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {guild.voiceChannels.map((vc, i) => (\n                                        <tr key={i}>\n                                            <td>{vc.name}</td>\n                                            <td>{vc.id}</td>\n                                            <td>{vc.canOperate ? \"true\" : \"false\"}</td>\n                                            <td>{vc.userLimit}</td>\n                                            <td>{vc.states.length}</td>\n                                        </tr>\n                                    ))}\n                                </tbody>\n                            </table>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>Guild name:</td>\n                        <td>{guild.name}</td>\n                    </tr>\n                </tbody>\n            </table>\n\n            <pre>\n                {JSON.stringify(data, undefined, 4)}\n            </pre>\n        </div >\n    );\n}","import React from 'react';\nimport { Link, Route, HashRouter as Router, Switch } from 'react-router-dom';\nimport Guild from './routes/Guild';\n\nfunction App() {\n    return (\n        <Router>\n            <div>\n                <nav>\n                    <ul>\n                        <li>\n                            <Link to=\"/\">Home</Link>\n                        </li>\n                    </ul>\n                </nav>\n\n                {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n                <Switch>\n                    <Route path=\"/:guild_id\" exact>\n                        <Guild />\n                    </Route>\n                    <Route path=\"/:guild_id/:channel_id\" exact>\n                        {/* <Channel /> */}\n                    </Route>\n                    <Route path=\"/\" exact>\n                        <div>\n                            whats poppin\n\n                            <div>\n                                <input type=\"text\" value={\"708811110928744578\"} />\n                                <Link to={\"/708811110928744578\"}>Go to guild</Link>\n                            </div>\n                        </div>\n                    </Route>\n                    <Route path=\"*\">\n                        <pre>404</pre>\n                    </Route>\n                </Switch>\n            </div>\n        </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' }\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n    body {\n        margin: 0;\n        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n            'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n            sans-serif;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n    }\n\n    code {\n        font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n            monospace;\n    }\n`;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { GlobalStyle } from './style';\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\n\nconst CLIENT = new ApolloClient({\n    name: \"stfu\",\n    uri: \"http://localhost:8000/graphql\",\n    cache: new InMemoryCache()\n});\n\nReactDOM.render(\n    <React.StrictMode>\n        <GlobalStyle />\n        <ApolloProvider client={CLIENT}>\n            <App />\n        </ApolloProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}