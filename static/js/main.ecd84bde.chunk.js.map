{"version":3,"sources":["constants.ts","components/Error.tsx","components/LazyAnimateImage.tsx","components/Loading.tsx","utils.ts","routes/Channel.tsx","routes/Guild.tsx","routes/Overview.tsx","App.tsx","serviceWorker.ts","style.ts","index.tsx"],"names":["BACKEND_DOMAIN","BACKEND_GRAPHQL_URL","DISCORD_CDN","ErrorScreen","refetch","error","networkError","statusCode","href","encodeURIComponent","window","location","onClick","JSON","stringify","undefined","LazyAnimateImage","source","rest","useState","hover","setHover","alt","src","onMouseEnter","bind","onMouseLeave","LoadingScreen","LoadingIcon","getGuildIcon","guild","should_animate","icon","id","startsWith","GET_CHANNEL","gql","MUTE_ALL","UNMUTE_ALL","Channel","useParams","guild_id","channel_id","useQuery","notifyOnNetworkStatusChange","pollInterval","variables","loading","data","useMutation","muteAll","unmuteAll","refetch_no_await","catch","e","console","channel","voiceChannel","ChannelInfo","operable","botMissingPermissions","userMissingPermissions","to","name","disabled","position","userLimit","states","length","map","s","i","key","style","color","member","toString","fontWeight","discriminator","nick","avatar","parseInt","getAvatar","mute","deaf","selfMute","selfDeaf","GET_GUILD","Guild","GuildInfo","voice_channels","useMemo","Array","from","voiceChannels","reduce","x","arr","get","category","push","set","Map","entries","sort","a","b","owner","vcs","vc","j","join","GET_SHARED_GUILDS","Overview","guilds","sharedGuilds","GuildsInfo","localeCompare","me","some","App","path","exact","Boolean","hostname","match","GlobalStyle","createGlobalStyle","CLIENT","ApolloClient","cache","InMemoryCache","dataIdFromObject","o","hash","credentials","headers","Accept","uri","ReactDOM","render","StrictMode","client","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","message"],"mappings":"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","file":"static/js/main.ecd84bde.chunk.js","sourcesContent":["/** Ia true if the app is in production mode */\nexport const IS_PROD = process.env.NODE_ENV === \"production\";\n\n/** Is true if the backend uses https */\nexport const IS_HTTPS = IS_PROD;\n/** The backend domain */\nexport const BACKEND_DOMAIN = IS_PROD ? \"stfu-backend.dusterthefirst.com\" : \"dev.stfu-backend.dtf.com:8000\";\n/** The backend graphql url */\nexport const BACKEND_GRAPHQL_URL = `http${IS_HTTPS ? \"s\" : \"\"}://${BACKEND_DOMAIN}/graphql`;\n\n/** The CDN for accessing images or content from discord */\nexport const DISCORD_CDN = \"https://cdn.discordapp.com/\";\n","import { ApolloError, ServerError } from \"@apollo/client\";\nimport React from \"react\";\nimport { BACKEND_DOMAIN } from \"../constants\";\n\n/** The props sent to the error screen */\ninterface IErrorScreenProps {\n    /** Function to trigger a refetch */\n    refetch(): void;\n    /** The error that caused this screen */\n    error: ApolloError;\n}\n\n/** A full screen error */\nexport default function ErrorScreen({ refetch, error }: IErrorScreenProps) {\n    if (error.networkError !== null && (error.networkError as Partial<ServerError>).statusCode === 401) {\n        return (\n            <div>\n                <h1>Unauthenticated</h1>\n                <p>You have to log in to access this page</p>\n                <a href={`//${BACKEND_DOMAIN}/oauth/login?from=${encodeURIComponent(window.location.href)}`}>Login</a>\n            </div>\n        );\n    } else {\n        return (\n            <div>\n                <h1>Error :(</h1>\n                <button onClick={refetch}>Retry</button>\n                <pre>{JSON.stringify(error, undefined, 4)}</pre>\n            </div>\n        );\n    }\n}\n","import React, { useState } from \"react\";\n\n/** the props for the `LazyAnimateImage` components */\ninterface IProps extends React.DetailedHTMLProps<React.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement> {\n    /** The callback to compute the source of the image */\n    source(hover: boolean): string;\n}\n\n/** A helper component to only animate images on hover */\nexport default function LazyAnimateImage({ source, ...rest }: IProps) {\n    const [hover, setHover] = useState(false);\n\n    return <img {...rest} alt={rest.alt} src={source(hover)} onMouseEnter={setHover.bind(setHover, true)} onMouseLeave={setHover.bind(setHover, false)} />;\n}","import React from \"react\";\n\n/** The props for the loading screen */\ninterface ILoadingScreenProps {\n    /** A way to refresh the query */\n    refetch(): void;\n}\n\n/** A loading screen component */\nexport function LoadingScreen({ refetch }: ILoadingScreenProps) {\n    return (\n        <div>\n            <h1>Loading...</h1>\n            <button onClick={refetch}>Retry</button>\n        </div>\n    );\n}\n\n/** A standalone, unobtrusive loading icon */\nexport function LoadingIcon() {\n    // TODO:\n    return (<b>Loading...</b>);\n}","import { DISCORD_CDN } from \"./constants\";\n\n/** A stripped down, barebones member for the gatAvatar function */\ninterface ISimpleMember {\n    /** The user id */\n    id: string;\n    /** The user avatar */\n    avatar: string | null;\n    /** The user discriminator */\n    discriminator: string;\n}\n\n/** Get the avatar for a user given their  */\nexport function getAvatar(member: ISimpleMember, should_animate = true): string {\n    if (member.avatar === null) {\n        return `${DISCORD_CDN}embed/avatars/${parseInt(member.discriminator, 10) % 5}.png`;\n    } else {\n        return `${DISCORD_CDN}avatars/${member.id}/${member.avatar}.${member.avatar?.startsWith(\"a_\") && should_animate ? \"gif\" : \"webp\"}`;\n    }\n}\n\n/** A stripped down, bare bones guild for the getGuildIcon function */\ninterface ISimpleGuild {\n    /** The id of the guild */\n    id: string;\n    /** The icon of the guild */\n    icon: string | null;\n}\n\n/** Get the icon for a guild */\nexport function getGuildIcon(guild: ISimpleGuild, should_animate = true): string | undefined {\n    if (guild.icon === null) {\n        return undefined;\n    } else {\n        return `${DISCORD_CDN}icons/${guild.id}/${guild.icon}.${guild.icon.startsWith(\"a_\") && should_animate ? \"gif\" : \"webp\"}`;\n    }\n}","import { FetchResult, gql, useMutation, useQuery } from \"@apollo/client\";\nimport React from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport ErrorScreen from \"../components/Error\";\nimport LazyAnimateImage from \"../components/LazyAnimateImage\";\nimport { LoadingIcon, LoadingScreen } from \"../components/Loading\";\nimport { getAvatar } from \"../utils\";\nimport { GetChannel, GetChannelVariables, GetChannel_guild, GetChannel_guild_voiceChannel } from \"./__generated__/GetChannel\";\nimport { MuteAll, MuteAllVariables } from \"./__generated__/MuteAll\";\nimport { UnmuteAll, UnmuteAllVariables } from \"./__generated__/UnmuteAll\";\n\n/** The graphql query to get the specific channel */\nconst GET_CHANNEL = gql`\n    query GetChannel($guild_id: String!, $channel_id: String!) {\n        guild(id: $guild_id) {\n            name\n            id\n            voiceChannel(id: $channel_id) {\n                botMissingPermissions\n                userMissingPermissions\n                category {\n                    id\n                    name\n                    position\n                }\n                id\n                name\n                position\n                states {\n                    channelId\n                    deaf\n                    mute\n                    selfDeaf\n                    selfMute\n                    id\n                    member {\n                        avatar\n                        bot\n                        color\n                        discriminator\n                        id\n                        joinedAt\n                        mute\n                        name\n                        nick\n                    }\n                }\n                userLimit\n            }\n        }\n    }\n`;\n\n/** The graphql query to mute all in a channel */\nconst MUTE_ALL = gql`\n    mutation MuteAll($channel_id: String!, $guild_id: String!) {\n        mute(channelId: $channel_id, guildId: $guild_id)\n    }\n`;\n\n/** The graphql query to unmute all in a channel */\nconst UNMUTE_ALL = gql`\n    mutation UnmuteAll($channel_id: String!, $guild_id: String!) {\n        unmute(channelId: $channel_id, guildId: $guild_id)\n    }\n`;\n\n/** The parameters for the channel */\ninterface IParams {\n    /** The parent guild's id */\n    guild_id: string;\n    /** The channel id to view */\n    channel_id: string;\n}\n\n/** The voice channel view */\nexport default function Channel() {\n    const { guild_id, channel_id } = useParams<IParams>();\n    const { loading, error, data, refetch } = useQuery<GetChannel, GetChannelVariables>(\n        GET_CHANNEL,\n        {\n            notifyOnNetworkStatusChange: true,\n            pollInterval: 60000,\n            variables: {\n                channel_id,\n                guild_id,\n            },\n        }\n    );\n    const [muteAll] = useMutation<MuteAll, MuteAllVariables>(MUTE_ALL, {\n        notifyOnNetworkStatusChange: true,\n        variables: {\n            channel_id,\n            guild_id\n        }\n    });\n    const [unmuteAll] = useMutation<UnmuteAll, UnmuteAllVariables>(UNMUTE_ALL, {\n        notifyOnNetworkStatusChange: true,\n        variables: {\n            channel_id,\n            guild_id\n        }\n    });\n\n    const refetch_no_await = () => { refetch().catch((e) => console.error(e)); };\n\n    if (loading && data === undefined) {\n        return (\n            <LoadingScreen refetch={refetch_no_await} />\n        );\n    } else if (error !== undefined) {\n        return (\n            <ErrorScreen error={error} refetch={refetch_no_await} />\n        );\n    } else {\n        // Safety: I can guarantee, at this state that data is not null since it is only allowed to be null if there is an error, which would be caught\n        // tslint:disable-next-line:no-non-null-assertion\n        const guild = data!.guild;\n\n        if (guild === null) {\n            return (\n                <div>\n                    <h1>The guild with id {guild_id} does not exist or is not available to the bot</h1>\n                </div>\n            );\n        }\n\n        const channel = guild.voiceChannel;\n\n        if (channel === null) {\n            return (\n                <div>\n                    <h1>The channel with id {channel_id} does not exist, is not a voice channel, or is not available to the bot</h1>\n                </div>\n            );\n        }\n\n        return (\n            <>\n                {loading ? <LoadingIcon /> : undefined}\n                <ChannelInfo guild={guild} channel={channel} refetch={refetch_no_await} muteAll={muteAll} unmuteAll={unmuteAll} />\n                <pre>\n                    {JSON.stringify(data, undefined, 4)}\n                </pre>\n            </>\n        );\n    }\n}\n\n/** The props for the GuildInfo component */\ninterface IChannelInfoProps {\n    /** The guild to view */\n    guild: GetChannel_guild;\n    /** The voice channel to view */\n    channel: GetChannel_guild_voiceChannel;\n    /** The refresh function to query a refresh */\n    refetch(): void;\n    /** The mute all function to unmute all */\n    muteAll(): Promise<FetchResult<MuteAll>>;\n    /** The unmute all function to unmute all */\n    unmuteAll(): Promise<FetchResult<UnmuteAll>>;\n}\n\n/** The information on a specific channel */\nfunction ChannelInfo({ guild, channel, refetch, muteAll, unmuteAll }: IChannelInfoProps) {\n    let operable = channel.botMissingPermissions === null && channel.userMissingPermissions === null;\n    return (\n        <div>\n            <div>/ <Link to=\"/\">Home</Link> / <Link to={`/${guild.id}`}>{guild.name}</Link> / {channel.name} </div>\n            <button onClick={refetch}>Refresh</button>\n\n            <div>\n                {channel.botMissingPermissions === null ? undefined : <div>The bot is unable to perform actions on this channel. You are missing the following permissions on the channel: {channel.botMissingPermissions}</div>}\n                {channel.userMissingPermissions === null ? undefined : <div>You are unable to perform actions on this channel. You are missing the following permissions on this channel: {channel.userMissingPermissions}</div>}\n                <button onClick={muteAll.bind(muteAll)} disabled={!operable}>Mute</button>\n                <button onClick={unmuteAll.bind(unmuteAll)} disabled={!operable}>Unmute</button>\n            </div>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Position</th>\n                        <th>Bot Missing Permissions</th>\n                        <th>User Missing Permissions</th>\n                        <th>User Limit</th>\n                        <th>User Count</th>\n                        <th>Users</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>{channel.name}</td>\n                        <td>{channel.position}</td>\n                        <td>{channel.botMissingPermissions}</td>\n                        <td>{channel.userMissingPermissions}</td>\n                        <td>{channel.userLimit}</td>\n                        <td>{channel.states.length}</td>\n                        <td>\n                            <table>\n                                <thead>\n                                    <tr>\n                                        <th>Name</th>\n                                        <th>Avatar</th>\n                                        <th>Id</th>\n                                        <th>Server Mute</th>\n                                        <th>Server Deaf</th>\n                                        <th>Self Mute</th>\n                                        <th>Self Deaf</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {channel.states.map((s, i) => {\n                                        const source = (hover: boolean) => `${getAvatar(s.member, hover)}?size=64`;\n\n                                        return (\n                                            <tr key={i}>\n                                                <td style={{ color: `#${s.member.color === null ? \"000000\" : s.member.color.toString(16)}`, fontWeight: \"bold\" }}>{s.member.name}#{s.member.discriminator}{s.member.nick === null ? undefined : ` (${s.member.nick})`}</td>\n                                                <td><LazyAnimateImage source={source} alt={`${s.member.name}'s avatar`} /></td>\n                                                <td>{s.member.id}</td>\n                                                <td>{s.mute.toString()}</td>\n                                                <td>{s.deaf.toString()}</td>\n                                                <td>{s.selfMute.toString()}</td>\n                                                <td>{s.selfDeaf.toString()}</td>\n                                            </tr>\n                                        );\n                                    })}\n                                </tbody>\n                            </table>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div >\n    );\n}\n","import { gql, useQuery } from \"@apollo/client\";\nimport React, { useMemo } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport ErrorScreen from \"../components/Error\";\nimport { LoadingIcon, LoadingScreen } from \"../components/Loading\";\nimport { getGuildIcon } from \"../utils\";\nimport {\n    GetGuild, GetGuildVariables, GetGuild_guild, GetGuild_guild_voiceChannels as VoiceChannel, GetGuild_guild_voiceChannels_category as ChannelCategory\n} from \"./__generated__/GetGuild\";\n\n/** The graphql query to get information about the specific guild */\nconst GET_GUILD = gql`\n    query GetGuild($guild_id: String!) {\n        guild(id: $guild_id) {\n            name,\n            id,\n            icon\n            banner\n            owner {\n                id\n                name\n                avatar\n                color\n                nick\n                discriminator\n            }\n            unavailable\n            voiceChannels {\n                botMissingPermissions\n                userMissingPermissions\n                category {\n                    id\n                    name\n                    position\n                }\n                id\n                name\n                position\n                states {\n                    deaf\n                    id\n                    channelId\n                    member {\n                        id\n                        name\n                        avatar\n                        color\n                        nick\n                        discriminator\n                    }\n                    mute\n                }\n                userLimit\n            }\n        }\n    }\n`;\n\n/** The parameters for the guild url */\ninterface IParams {\n    /** The guild id to view */\n    guild_id: string;\n}\n\n/** The page for guild information */\nexport default function Guild() {\n    const { guild_id } = useParams<IParams>();\n    const { loading, error, data, refetch } = useQuery<GetGuild, GetGuildVariables>(GET_GUILD, { variables: { guild_id }, notifyOnNetworkStatusChange: true, pollInterval: 60000 });\n    const refetch_no_await = () => { refetch().catch((e) => console.error(e)); };\n\n    if (loading && data === undefined) {\n        return (\n            <LoadingScreen refetch={refetch_no_await} />\n        );\n    } else if (error !== undefined) {\n        return (\n            <ErrorScreen error={error} refetch={refetch_no_await} />\n        );\n    } else {\n        // Safety: I can guarantee, at this state that data is not null since it is only allowed to be null if there is an error, which would be caught\n        // tslint:disable-next-line:no-non-null-assertion\n        const guild = data!.guild;\n\n        if (guild === null) {\n            return (\n                <div>\n                    <h1>The guild with id {guild_id} does not exist or is not available to the bot</h1>\n                </div>\n            );\n        }\n\n        return (\n            <>\n                {loading ? <LoadingIcon /> : undefined}\n                <GuildInfo guild={guild} refetch={refetch_no_await} />\n                <pre>\n                    {JSON.stringify(data, undefined, 4)}\n                </pre>\n            </>\n        );\n    }\n}\n\n/** The props for the GuildInfo component */\ninterface IGuildInfoProps {\n    /** The guild to view */\n    guild: GetGuild_guild;\n    /** The refresh function to query a refresh */\n    refetch(): void;\n}\n\n/** The map for the voice chats */\ntype VCMap = Map<ChannelCategory | null, VoiceChannel[]>;\n\n/** The view into the information of the guild */\nfunction GuildInfo({ guild, refetch }: IGuildInfoProps) {\n    const voice_channels: Array<[ChannelCategory | null, VoiceChannel[]]> = useMemo(() =>\n        Array.from(\n            guild.voiceChannels\n                .reduce<VCMap>((map, x) => {\n                    let arr = map.get(x.category);\n                    if (arr === undefined) {\n                        arr = [];\n                    }\n\n                    arr.push(x);\n\n                    map.set(x.category, arr);\n\n                    return map;\n                }, new Map())\n                .entries()\n        )\n            .sort(([a], [b]) =>\n                (a?.position === undefined ? -1 : a.position) - (b?.position === undefined ? -1 : b?.position)\n            ).map(([cat, vcs]) =>\n                [cat, vcs.sort((a, b) => a.position - b.position)]\n            ),\n        [guild.voiceChannels]\n    );\n\n    return (\n        <div>\n            <div>/ <Link to=\"/\">Home</Link> / {guild.name}</div>\n            <button onClick={refetch}>Refresh</button>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Property</th>\n                        <th>Value</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>Guild name:</td>\n                        <td>{guild.name}</td>\n                    </tr>\n                    <tr>\n                        <td>Guild id:</td>\n                        <td>{guild.id}</td>\n                    </tr>\n                    <tr>\n                        <td>Guild owner:</td>\n                        <td style={{ color: `#${guild.owner.color === null ? \"000000\" : guild.owner.color.toString(16)}`, fontWeight: \"bold\" }}>{guild.owner.nick === null ? guild.owner.name : guild.owner.nick}#{guild.owner.discriminator}</td>\n                    </tr>\n                    <tr>\n                        <td>Voice categories:</td>\n                        <td>\n                            <table>\n                                <thead>\n                                    <tr>\n                                        <th>Name:</th>\n                                        <th>Position:</th>\n                                        <th>Voice channels:</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {voice_channels.map(([category, vcs], i) => (\n                                        <tr key={i}>\n                                            <td>{category?.name === undefined ? \"No Category\" : category.name}</td>\n                                            <td>{category?.position === undefined ? -1 : category.position}</td>\n                                            <td>\n                                                <table>\n                                                    <thead>\n                                                        <tr>\n                                                            <th>Name</th>\n                                                            <th>Position</th>\n                                                            <th>Bot Missing Permissions</th>\n                                                            <th>User Missing Permissions</th>\n                                                            <th>User Limit</th>\n                                                            <th>User Count</th>\n                                                            <th>Users</th>\n                                                        </tr>\n                                                    </thead>\n                                                    <tbody>\n                                                        {vcs.map((vc, j) => (\n                                                            <tr key={j}>\n                                                                <td><Link to={`/${guild.id}/${vc.id}`}>{vc.name}</Link></td>\n                                                                <td>{vc.position}</td>\n                                                                <td>{vc.botMissingPermissions}</td>\n                                                                <td>{vc.userMissingPermissions}</td>\n                                                                <td>{vc.userLimit}</td>\n                                                                <td>{vc.states.length}</td>\n                                                                <td>{vc.states.map(s => `${s.member.name}#${s.member.discriminator}`).join(\", \")}</td>\n                                                            </tr>\n                                                        ))}\n\n                                                    </tbody>\n                                                </table>\n                                            </td>\n                                        </tr>\n                                    ))}\n                                </tbody>\n                            </table>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>Guild icon:</td>\n                        <td><img src={getGuildIcon(guild)} alt=\"Guild icon\" /></td>\n                    </tr>\n                </tbody>\n            </table>\n        </div >\n    );\n}\n","import { gql, useQuery } from \"@apollo/client\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport ErrorScreen from \"../components/Error\";\nimport { LoadingIcon, LoadingScreen } from \"../components/Loading\";\nimport { getGuildIcon } from \"../utils\";\nimport { GetSharedGuilds, GetSharedGuilds_sharedGuilds } from \"./__generated__/GetSharedGuilds\";\n\n/** The graphql query to get information about the shared guilds between the user and bot */\nconst GET_SHARED_GUILDS = gql`\n    query GetSharedGuilds {\n        sharedGuilds {\n            icon\n            id\n            name\n            owner {\n                id\n                discriminator\n                name\n                nick\n                color\n            }\n            voiceChannels {\n                userMissingPermissions\n                botMissingPermissions\n            }\n            me {\n                id\n                discriminator\n                name\n                nick\n                color\n            }\n        }\n    }\n`;\n\n/** The page for guild information */\nexport default function Overview() {\n    const { loading, error, data, refetch } = useQuery<GetSharedGuilds>(GET_SHARED_GUILDS, { notifyOnNetworkStatusChange: true, pollInterval: 60000, });\n    const refetch_no_await = () => { refetch().catch((e) => console.error(e)); };\n\n    if (loading && data === undefined) {\n        return (\n            <LoadingScreen refetch={refetch_no_await} />\n        );\n    } else if (error !== undefined) {\n        return (\n            <ErrorScreen error={error} refetch={refetch_no_await} />\n        );\n    } else {\n        // Safety: I can guarantee, at this state that data is not null since it is only allowed to be null if there is an error, which would be caught\n        // tslint:disable-next-line:no-non-null-assertion\n        const guilds = data!.sharedGuilds;\n\n        return (\n            <>\n                {loading ? <LoadingIcon /> : undefined}\n                <GuildsInfo guilds={guilds} refetch={refetch_no_await} />\n                <pre>\n                    {JSON.stringify(data, undefined, 4)}\n                </pre>\n            </>\n        );\n    }\n}\n\n/** The props for the GuildInfo component */\ninterface IGuildsInfoProps {\n    /** The guilds to view */\n    guilds: Readonly<GetSharedGuilds_sharedGuilds[]>;\n    /** The refresh function to query a refresh */\n    refetch(): void;\n}\n\n/** The view into the information of the guild */\nfunction GuildsInfo({ guilds, refetch }: IGuildsInfoProps) {\n    return (\n        <div>\n            <div>/ Home</div>\n            <button onClick={refetch}>Refresh</button>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Guild Name</th>\n                        <th>Guild Icon</th>\n                        <th>Guild Id</th>\n                        <th>Guild Owner</th>\n                        <th>You</th>\n                        <th>Bot Operable</th>\n                        <th>User Operable</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {[...guilds].sort((a, b) => a.name.localeCompare(b.name)).map((guild) => (\n                        <tr key={guild.id}>\n                            <td><Link to={`/${guild.id}`}>{guild.name}</Link></td>\n                            <td><img src={getGuildIcon(guild)} alt=\"Guild icon\" /></td>\n                            <td>{guild.id}</td>\n                            <td style={{ color: `#${guild.owner.color === null ? \"000000\" : guild.owner.color.toString(16)}`, fontWeight: \"bold\" }}>{guild.owner.nick === null ? guild.owner.name : guild.owner.nick}#{guild.owner.discriminator}</td>\n                            <td style={{ color: `#${guild.me.color === null ? \"000000\" : guild.me.color.toString(16)}`, fontWeight: \"bold\" }}>{guild.me.nick === null ? guild.me.name : guild.me.nick}#{guild.me.discriminator}</td>\n                            <td>{guild.voiceChannels.some(x => x.botMissingPermissions === null).toString()}</td>\n                            <td>{guild.voiceChannels.some(x => x.userMissingPermissions === null).toString()}</td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </div >\n    );\n}\n","import React from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { BACKEND_DOMAIN } from \"./constants\";\nimport Channel from \"./routes/Channel\";\nimport Guild from \"./routes/Guild\";\nimport Overview from \"./routes/Overview\";\n\n/** The main entry point for the app */\nfunction App() {\n    return (\n        <Router>\n            <div>\n                <a href={`//${BACKEND_DOMAIN}/oauth/logout?from=${encodeURIComponent(window.location.href)}`}>Logout</a>\n\n                {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n                <Switch>\n                    <Route path=\"/:guild_id\" exact={true}>\n                        <Guild />\n                    </Route>\n                    <Route path=\"/:guild_id/:channel_id\" exact={true}>\n                        <Channel />\n                    </Route>\n                    <Route path=\"/\" exact={true}>\n                        <Overview />\n                    </Route>\n                    <Route path=\"*\">\n                        <pre>404</pre>\n                    </Route>\n                </Switch>\n            </div>\n        </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' }\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import { createGlobalStyle } from \"styled-components\";\n\n/** The global style for the application */\nexport const GlobalStyle = createGlobalStyle`\n    body {\n        margin: 0;\n        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n            'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n            sans-serif;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n    }\n\n    code {\n        font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n            monospace;\n    }\n\n    table {\n        border: 2px solid black;\n        width: 100%;\n\n        td {\n            border: 2px solid black;\n            text-align: center;\n        }\n        th {\n            background: black;\n            color: white;\n            text-align: center;\n        }\n    }\n`;","import { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\nimport hash from \"object-hash\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BACKEND_GRAPHQL_URL } from \"./constants\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { GlobalStyle } from \"./style\";\n\n/** The client to use for apollo */\nconst CLIENT = new ApolloClient({\n    cache: new InMemoryCache({\n        dataIdFromObject: o => hash(o), // tslint:disable-line: no-unnecessary-callback-wrapper\n    }),\n    credentials: \"include\",\n    headers: {\n        Accept: \"application/json\"\n    },\n    name: \"stfu\",\n    uri: BACKEND_GRAPHQL_URL\n});\n\nReactDOM.render(\n    <React.StrictMode>\n        <GlobalStyle />\n        <ApolloProvider client={CLIENT}>\n            <App />\n        </ApolloProvider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}